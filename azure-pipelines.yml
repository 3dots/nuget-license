name: "$(Rev:r)"

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Test
    displayName: 'Test'
    jobs:
      - job: Test
        displayName: 'Test'
        steps:
        - task: DotNetCoreCLI@2
          displayName: 'Restore Nuget Packages'
          inputs:
            command: 'restore'
            projects: '**/*.Test*.csproj'
            feedsToUse: 'select'
            vstsFeed: 'GriesserElectronicAG'
            
        - task: DotNetCoreCLI@2
          displayName: 'Build'
          inputs:
            command: 'build'
            projects: '**/*.Test*.csproj'
            arguments: '-c Release --no-restore'
        
        - task: DotNetCoreCLI@2
          displayName: 'Execute Unit Tests'
          inputs:
            command: 'test'
            projects: '**/*.Test*.csproj'
            arguments: '-c Release --collect:"XPlat Code Coverage"'
        
        - task: reportgenerator@4
          displayName: 'Generate code coverage report'
          inputs:
            reports: '$(Agent.TempDirectory)/**/*cobertura.xml'
            targetdir: '$(Agent.TempDirectory)/coveragereport'
            reporttypes: 'Cobertura'
            tag: 
        
        - task: PublishCodeCoverageResults@1
          displayName: 'Publish code coverage report'
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: '$(Agent.TempDirectory)/coveragereport/*.xml'
        
  - stage: BuildAndPublish
    displayName: 'Build And Publish'
    jobs:
      - job: BuildAndPublish
        displayName: 'Build and Publish'
        steps:
          - task: DotNetCoreCLI@2
            displayName: 'Restore Nuget Packages'
            inputs:
              command: 'restore'
              projects: '**/src/*.csproj'
              feedsToUse: 'select'
              vstsFeed: 'GriesserElectronicAG'
        
          - task: DotNetCoreCLI@2
            displayName: 'Build'
            inputs:
              command: 'build'
              projects: '**/src/*.csproj'
              arguments: '-p:Version=1.0.$(Build.BuildNumber) -c Release /p:CopyOutputSymbolsToPublishDirectory=false --no-restore'
        
          - task: CopyFiles@2
            displayName: 'prepare application for publishing'
            inputs:
              SourceFolder: '$(agent.builddirectory)'
              Contents: '**/src/**/Release/**'
              TargetFolder: '$(Build.ArtifactStagingDirectory)'
              CleanTargetFolder: true
              OverWrite: true
              flattenFolders: true
              preserveTimestamp: true
        
          - task: CopyFiles@2
            displayName: 'prepare allowed license information for publishing'
            inputs:
              SourceFolder: 'LicenseInformation'
              Contents: '**'
              TargetFolder: '$(Build.ArtifactStagingDirectory)/LicenseInformation'
              OverWrite: true
              preserveTimestamp: true
        
          - task: PublishBuildArtifacts@1
            displayName: 'publish artifacts'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'NugetLicense'
              publishLocation: 'Container'